{"version":3,"sources":["components/Tower/Tower.js","components/GameComplete/GameComplete.js","components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Tower","props","useDrag","type","item","from","towerNum","diskNum","disks","end","monitor","getDropResult","collect","isDragging","drag","useState","useDrop","accept","canDrop","length","drop","handleDiskMove","isOver","ref","className","id","map","index","style","width","GameComplete","game__complete","action","towerLevel","buildTime","time","moveCount","name","placeholder","Game","gameCompleted","setGameCompleted","setMoveCount","gameTimer","setGameTimer","1","Array","gameLevel","keys","2","3","setDisks","fromTower","toTower","diskscopy","diskMoved","shift","prev","unshift","useEffect","interval","setInterval","clearInterval","DndProvider","backend","HTML5Backend","App","start","setStart","setGameLevel","errors","setErrors","color","min","max","onInput","e","target","value","onClick","disabled","Number","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4216c57.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Tower.css\";\r\nimport { useDrop, useDrag } from \"react-dnd\";\r\n\r\nfunction Tower(props) {\r\n  const [{ isDragging }, drag] = useDrag(() => ({\r\n    type: \"DISK\",\r\n    item: { from: props.towerNum, diskNum: props.disks },\r\n    end: (item, monitor) => {\r\n      const dropResult = monitor.getDropResult();\r\n    },\r\n    collect: (monitor) => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n  }));\r\n\r\n  const [disks, setDisks] = useState(props.disks);\r\n\r\n  const [{ canDrop, isOver }, drop] = useDrop(() => ({\r\n    accept: \"DISK\",\r\n    // hover(item, monitor) {\r\n    //   monitor.canDrop(item, monitor)\r\n    //     ? console.log(\"ABLE\")\r\n    //     : console.log(\"DISABLE\");\r\n    // },\r\n    canDrop(item, monitor) {\r\n      if (props.disks.length === 0 || props.disks[0] > item.diskNum[0])\r\n        return true;\r\n    },\r\n    drop: (item, monitor) => {\r\n      // console.log(item.diskNum, props.disks[0]);\r\n      props.handleDiskMove(item.from, props.towerNum);\r\n    },\r\n  }));\r\n\r\n  return (\r\n    <div ref={drop} className=\"tower-container\" id={props.towerNum}>\r\n      <div className=\"tower\">\r\n        {disks.map((item, index) => (\r\n          <div\r\n            ref={item === disks[0] ? drag : null}\r\n            className=\"disk\"\r\n            id={item}\r\n            style={{\r\n              width: item * 50 + \"px\",\r\n            }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tower;\r\n","import React from \"react\";\r\nimport \"../GameComplete/GameComplete.css\";\r\n\r\nfunction GameComplete(props) {\r\n  return (\r\n    <div game__complete>\r\n      <form action=\"/\" type=\"POST\">\r\n        <div className=\"game__complete-description\">\r\n          <p>Congratulations üéâüéâüéâ</p>\r\n          <p>\r\n            You built the {props.towerLevel}-disk Hanoi Tower in only\r\n            {props.buildTime}\r\n            {props.time} seconds and {props.moveCount} moves üëè.\r\n          </p>\r\n          <p>Please enter your name to be in the leaderboard!</p>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          className=\"game__username-input\"\r\n          placeholder=\"your name\"\r\n        ></input>\r\n        <div>\r\n          <button type=\"submit\" className=\"game__btn\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameComplete;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport \"./Game.css\";\r\nimport Tower from \"../Tower/Tower\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport GameComplete from \"../GameComplete/GameComplete\";\r\n\r\nfunction Game(props) {\r\n  const [gameCompleted, setGameCompleted] = useState(false);\r\n  const [moveCount, setMoveCount] = useState(0);\r\n  const [gameTimer, setGameTimer] = useState(0);\r\n  const [disks, setDisks] = useState({\r\n    1: [...Array(props.gameLevel).keys()].map((item) => item + 1),\r\n    2: [],\r\n    3: [],\r\n  });\r\n\r\n  function handleDiskMove(fromTower = 1, toTower = 2) {\r\n    let diskscopy = { ...disks };\r\n    let diskMoved = diskscopy[fromTower].shift();\r\n    setMoveCount((prev) => prev + 1);\r\n    setDisks({\r\n      ...disks,\r\n      fromTower: diskscopy[fromTower],\r\n      toTower: diskscopy[toTower].unshift(diskMoved),\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    let interval = setInterval(() => {\r\n      setGameTimer((gameTimer) => gameTimer + 1);\r\n    }, 1000);\r\n\r\n    if (\r\n      disks[2].length === props.gameLevel ||\r\n      disks[3].length === props.gameLevel\r\n    ) {\r\n      clearInterval(interval);\r\n      setGameCompleted(true);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [moveCount]);\r\n\r\n  return (\r\n    <>\r\n      {gameCompleted ? (\r\n        <GameComplete\r\n          towerLevel={props.gameLevel}\r\n          buildTime={gameTimer}\r\n          moveCount={moveCount}\r\n        ></GameComplete>\r\n      ) : (\r\n        <div>\r\n          <div className=\"game__timer\">Time: {gameTimer} s</div>\r\n          <div className=\"game__move-count\">Moves: {moveCount}</div>\r\n          <div className=\"towers\">\r\n            <DndProvider backend={HTML5Backend}>\r\n              <Tower\r\n                // ref={drop}\r\n                disks={disks[\"1\"]}\r\n                handleDiskMove={handleDiskMove}\r\n                towerNum={1}\r\n              ></Tower>\r\n              <Tower\r\n                // ref={drop}\r\n                disks={disks[\"2\"]}\r\n                towerNum={2}\r\n                handleDiskMove={handleDiskMove}\r\n              ></Tower>\r\n              <Tower\r\n                // ref={drop}\r\n                disks={disks[\"3\"]}\r\n                towerNum={3}\r\n                handleDiskMove={handleDiskMove}\r\n              ></Tower>\r\n            </DndProvider>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React, { useState } from \"react\";\nimport Game from \"./components/Game/Game\";\nimport \"./App.css\";\nfunction App() {\n  const [start, setStart] = useState(false);\n  const [gameLevel, setGameLevel] = useState(3);\n  const [errors, setErrors] = useState([]);\n  function handleStart(e) {\n    setStart(true);\n  }\n\n  function handleLevelInput(e) {\n    if (e.target.value > 10) {\n      setErrors((prev) => [\n        \"Level can't be over 10 (It might just take you a bit longer than you think ü§≠)\",\n      ]);\n    } else if (e.target.value < 3) {\n      setErrors((prev) => [\n        \"Level can't be less than 3 (You won't enjoy building it if it's that easy üòâ)\",\n      ]);\n    } else {\n      setErrors([]);\n      setGameLevel(e.target.value || 3);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"game__title\">HANOI TOWERS</h1>\n      {!start && (\n        <>\n          <div className=\"game__description\">\n            <p>\n              Hello üëãüëã! In this game you have to solve a popular mathematical\n              game-puzzle called <strong>Hanoi Towers! </strong>\n              The objective of the puzzle is to move the entire stack to last\n              rod, obeying the following simple rules:\n            </p>\n            <p>Only one disk can be moved at a time. </p>\n            <p>\n              Each move consists of taking the upper disk from one of the stacks\n              and placing it on top of another stack or on an empty rod.\n            </p>\n            <p>No larger disk may be placed on top of a smaller disk.</p>\n          </div>\n          <span>Please select the level: </span>\n          <span className=\"game__error-message\" style={{ color: \"red\" }}>\n            {errors}\n          </span>\n          <div className=\"game__level\">\n            <input\n              placeholder=\"Enter the level\"\n              type=\"number\"\n              className=\"game__level-input\"\n              name=\"level\"\n              min={3}\n              max={10}\n              onInput={handleLevelInput}\n            />\n\n            <div>\n              <button\n                className=\"game__btn\"\n                onClick={handleStart}\n                disabled={errors.length !== 0}\n              >\n                Start\n              </button>\n            </div>\n          </div>\n        </>\n      )}\n\n      {start && <Game gameLevel={Number(gameLevel)}></Game>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}